[{"fullname": "Ceaser", "modulename": "Ceaser", "qualname": "", "type": "module", "doc": "<p>NAME\n    Ceaser.py - cipher and print message</p>\n\n<p>SYNOPSIS\n    ...$ ./Ceaser.py -m \"Hello\" -k 12\n    ...$ ./Ceaser.py --message \"Hello\" --key 12\n    ...$ ./Ceaser.py -h</p>\n\n<p>DESCRIPTION\n    Caesar cipher is to replace each plaintext letter with a \n     different one a fixed number of places down the alphabet.\n    This program Has a right shift default I.E. A becomes B with a fixed key of 1,\n     you shift left with a negative key I.E. -1 B then becomes A</p>\n\n<p>SEE ALSO\n    https://en.wikipedia.org/wiki/Caesar_cipher\n    https://github.com/apscandy/ICTPRG405-Python/blob/main/AT1/Ceaser.py</p>\n\n<p>BUGS\n    Beware of entering <code>@#</code> in the Cli as bash, terminal and powershell try to interpret <code>@#</code> and will brake the script</p>\n"}, {"fullname": "Ceaser.main", "modulename": "Ceaser", "qualname": "main", "type": "function", "doc": "<p>Takes args from the CLI i.e. <code>python3 Ceaser.py [-k \"key\"]... [-m \"message\"]...</code></p>\n\n<p>Parameters:\n    key (int): A number between -26 and 26\n    message (str): message to be converted</p>\n\n<p>Returns:\n    message (str): converted string</p>\n\n<p>Doctest:\n    ...$ ./Ceaser.py -m \"Hello\" -k 12\n    Message is: TQXXA</p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "Ceaser.main_ut", "modulename": "Ceaser", "qualname": "main_ut", "type": "function", "doc": "<p>Testing function for unittest module calls convert_to_ceasar and encrypt_caesar</p>\n\n<p>Parameter:\n    key (int): A number between -26 and 26\n    message (str): message to be converted</p>\n\n<p>Returns:\n    message (str): converted string from rot</p>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>message = \"HELLO\"\n      key = 13\n      encrypt_caesar(key,message)\n          'URYYB'</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "parameters": ["key", "messsage"], "funcdef": "def"}, {"fullname": "Ceaser.clear_terminal", "modulename": "Ceaser", "qualname": "clear_terminal", "type": "function", "doc": "<p>Clears the terminal for a clean output</p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "Ceaser.key_check", "modulename": "Ceaser", "qualname": "key_check", "type": "function", "doc": "<p>check if key is in range -26 to 26</p>\n", "parameters": ["key"], "funcdef": "def"}, {"fullname": "Ceaser.convert_to_ceasar", "modulename": "Ceaser", "qualname": "convert_to_ceasar", "type": "function", "doc": "<p>Converts message:str to upper case and removes non alpha-characters</p>\n\n<p>Pseudo code:\n    Convert text to uppercase\n    Replaces fullstops with X\n    Removes spaces\n    Removes numbers\n    Removes special characters</p>\n\n<p>Parameter:\n    message (str): message to be converted </p>\n\n<p>Returns:\n    message (str): converted string</p>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>message = \"Hello\"\n      convert_to_ceasar(message)\n          'HELLO'</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "parameters": ["message"], "funcdef": "def"}, {"fullname": "Ceaser.encrypt_caesar", "modulename": "Ceaser", "qualname": "encrypt_caesar", "type": "function", "doc": "<p>Shifts message:str by using key:int to cipher message:str</p>\n\n<p>Pseudo code:\n    Takes key and message parameter\n    Shifts letters in message by the key number\n    Makes translation table and uses key for shift value\n    Translation table looks up new value then message is saved to new value\n    Returns ciphered message </p>\n\n<p>Parameter:\n    key (int): A number between -26 and 26\n    message (str): The message to be encoded/decoded</p>\n\n<p>Returns:\n    message (str): encoded/decoded message</p>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>message = \"Hello\"\n      message = convert_to_ceasar(message)\n      key = 13\n      encrypt_caesar(key, message)\n          'URYYB'</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "parameters": ["key", "message"], "funcdef": "def"}]